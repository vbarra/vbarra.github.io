---
title: Linear algebra
image: ../img/linear.png
page-layout: full
about:
  template: solana
  image-width: 12em
  image-shape: round
---

#### **Course description**
---

Numerical analysis: a linear algebra perspective. How to solve linear systems with applications to least squares and eigen analysis.

#### **Syllabus**
---

1. A primer on linear algebra
2. Linear systems
3. Numerical stability
4. Least squares and orthogonal transformations
5. Eigenanalysis
6. Positive definite matrices
7. Introduction to optimisation in finite dimension





#### **Example**

Gradient descent on the Branin function
$$f(x)=a(x_2-bx^{2}_1+cx_1-r)+s(1-t)cos(x_1)+s$$
---
```{python}
import numpy as np
import matplotlib.pyplot as plt

def branin(x):
    x1 = x[0]
    x2 = x[1]
    a = 1.
    b = 5.1 / (4.*np.pi**2)
    c = 5. / np.pi
    r = 6.
    s = 10.
    t = 1. / (8.*np.pi)
    ret  = a*(x2-b*x1**2+c*x1-r)**2+s*(1-t)*np.cos(x1)+s
    return ret

def grad_branin(x):
    x1 = x[0]
    x2 = x[1]
    a = 1.
    b = 5.1 / (4.*np.pi**2)
    c = 5. / np.pi
    r = 6.
    s = 10.
    t = 1. / (8.*np.pi)
    # d  = a*(x2-b*x1**2+c*x1-r)**2 + s*(1-t)*np.cos(x1)+s
    d1 = (-2*b*x1 + c)*a*2*(x2-b*x1**2+c*x1-r) - s*(1-t)*np.sin(x1)
    d2 = 2 * a * (x2-b*x1**2+c*x1-r)
    return d1, d2
    

range_x = np.linspace(-5, 10, 100)
range_y = np.linspace(0, 15, 100)
xx, yy = np.meshgrid(range_x, range_y)
res = np.array([branin(x) for x in zip(xx.ravel(), yy.ravel())])
res = res.reshape(xx.shape)

fig, axes = plt.subplots(1, 3, figsize=(10, 5), dpi=100)
for ax, pas in zip(axes, [0.001, 0.1, 0.3]):
    ax.set_title("step={}".format(pas))
    ax.imshow(res, origin="lower", extent=(range_x[0], range_x[-1], range_y[0], range_y[-1]))
    x = np.array((6, 14))
    for i in range(30):
        step = -pas * np.array(grad_branin(x))
        ax.arrow(x[0], x[1], step[0], step[1], color='r', head_width=0.2, length_includes_head=True)
        x = x + step
    print("step=",str(pas), " x=",str(x),"f(x)=",str(branin(x)))
plt.tight_layout()
```